<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIB0AAAEAIAAcDwAAFgAAACgAAAAgAAAAOgAAAAEAIAAAAAAAgA4AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAA
        AAEBCwENCRILIA4VDy4NFQ0tBw4HHwAFAAsAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQYBAAAD
        AAYQGRI5GSAeiCYtMMMvNDnhMjc+7DM3PesxNDrfKS4yvx8lJIQQGxQ1AA4ABAMSBgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD9X
        QwATIBUhYGdilp2enex8gIL/UVRb/zU5Pv9BRkz/P0NN/0BCTf9BQ03/PD9J/zA0OuoeJiSQCxkOHRkj
        HgAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB+h4AAJisnNoWIhsjb29v/+Pf4//P09P/b3N3/srO0/7u7vf+qrK7/dnh9/0ZIUP9AQ03/QUVP/zs/
        SP8mLTDEEBoWMyUqMQABEQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAiPCMALTgwABclGi6MkI7R6+rr//j49//19fb/9fX2//j2+P/59/n/+/n7//z6+//v7e//wsLE/4mL
        j/9OUFf/PkFK/z5ASv8qLzLNERsTLBYeGgAEFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAoUCwAAAAAQZGlmsuPj5P/69vj/9vX2//X09v/19Pb/9vX3//f09v/S0tb/2tve//f3
        +P/5+fn/9fX1/9DQ0v+LjI//VVZc/zw/RP8eJCWwAw4FEAsVDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAMIg4AT4e0ABc0QWh6kqD68/P1//b19v/29ff/9fX2//b19//49vj/tLS3/2Rw
        gP9rcn7/0dLS//r5+f/39fb/+Pf5//f1+P/k4+T/oKOk/ztidfoePUpnPoGuAB0pEQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgTEgAAAAAULmN/yW2btP/t7O3/9vX3//b09v/29fb/6ejp/87N
        zv86Ozv/DxMX/xAUFf9qamr/3Nzc//Dv8P/29fb/9/T2//v4+f+3xcz/R5/I/zBohcYAAAASCRQSAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGzI9ABgsM0c6ia71Y566/+bn6P/29vf/9/X2//Tz
        9P/T09P/y8vM/5SUlf9WVlX/cXJx/7q7u//X19f/6+zr//f29//39ff/+fb4/627xf9Gn8r/Po608xou
        NUEbMz4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACY+MwBTn8YAJkxYfEChyf9Qp8r/zNba//j3
        9//39vb/6unp/7e3t//z8/T/+Pf5//Hx8v/19fX/+fn5/9/f3//BwcH/9vX3//b19//29fb/may2/0mo
        0v9FpM//Kk1edFCOsQAtQDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCkgAAAAAAItXm+jRq3T/0in
        yv+gsbf/+Pf3//f19v/t6+z/xcTF//Lx8//29Pb/9vX2//X19v/39vf/39/f/8jHyP/39fb/9vX3/+3s
        7v9ueYX/SJe5/02w2/8yYHScAAAAABQiFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPIBgAAAAABjRo
        ebZMtNj/S6bF/2t6g//t7Oz/9/b3//f19//59/n/9/X3//f09v/19fb/9vX2//X19v/29ff/+Pb4//f0
        9v/49vj/2dnd/2NwhP9Ngp7/VLfb/zhpeq4AAAAEDh0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIl
        GwAAAAAGNGd2tVK32P9PlrL/W2x+/8LFyP/69/j/9/T3//f09v/39ff/9vT2//X09v/19Pb/9PP1//X0
        9v/39ff/9vT3//j2+P+7w8b/a42h/1B7kv9cudb/Oml4rAAAAAMRIBIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAIDAoAAAAAAEyW2ifV7bU/02Lof9lip7/lKWr//Py8//29ff/9vX2//b19//29ff/9vX3//b1
        9//19Pb/9fT2//X09v/49vj/7uzt/4mXmv9smaj/THmK/2C50v84YGqV////ABwnGwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABNV0YAR3iMACpFS3RYrcX/UpOo/26gsf9wkZv/tru8//b09v/39/f/9vX2//b1
        9//29Pb/9vT2//f19v/29Pf/+Pb3/+Ph4v+bsLX/ZY6a/2uYpP9XkKP/XrDJ/y1KTmtFcoEAKTIhAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWJSQAFiEfOVGUpO5cprv/XoeT/1ySof9uqbv/obW8/9vc
        3f/18vL/+ff3//n2+P/59vj/+PX2//Tx8//FxcX/b4eN/2u9z/9tw9j/WYSP/2Kpv/9WmKzqFyMiMhgo
        KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoRCgAAAAAJP2lzrmeyyf9Ug4//asLX/27Q
        5v9twtX/erK//5y8w//Czc//ys/Q/8LFxv+ltLj/k7O5/3itt/9svtD/cdLp/3HR6f9rv9T/bL/U/0Fq
        dqkAAAAHCA0HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBkFAC5HTQAdLjBEWZan7G3E
        2P9u0OT/b9Hl/3HR5v911Of/dtHj/3W/zP93uMH/da64/3e+zP940+T/eNjn/3bW6P920+j/c9Ln/3bV
        6f9dnantHy8uQzBHSgAOEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgQDAAAA
        AAM0VFp+abXE+3TV6f9z1Of/ddTn/3nX5/972ef/e9rp/37b6v+A2+v/gdrn/4Ha6P+A2uj/fdvo/3zZ
        6P962Or/bbbE/DVUVIMAAAADAwcCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAADBYTAAAAAA5AZGmYb7jG/HvY6f972On/fdnm/3/b6P+A3On/gdzo/4Pc5/+E3ef/g9vo/4Pb
        5/+D3en/gt7q/3O7xfxBYmWbAAAADw4WEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAADxUVAAIAABA5VVeLZ6Or84DU4P+F3uv/hN7q/4Te6f+F3uj/hd7o/4be
        5/+G3+r/h+Dq/4TX3/9rpqzxO1dYiQUDABETFxIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYEAAAAAAcnNTRQTXR2u2ypr/R+ytD/hdjg/4jd
        5v+H3uX/hdjg/3/K0v9uqrDwUXd4tSg2M0sAAAAGBAQDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8SDQADAgAOIC0qRDlU
        U4FJbm6qU3x9vVR9frtLcXKkPFhXeB4uKjsAAAALBwsHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAMAAAAJAAAACQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////w
        D///wAP//4AB//8AAP/+AAB//AAAP/wAAD/4AAAf+AAAH/gAAB/wAAAf8AAAD/AAAA/wAAAf+AAAH/gA
        AB/4AAAf/AAAP/wAAD/+AAB//wAA//+AAf//4Af///w///////////////////////8=
</value>
  </data>
</root>