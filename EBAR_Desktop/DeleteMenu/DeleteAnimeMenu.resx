<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/6s4A1P7iAXmp
        iBFWemEpRmRPPj5WREo+V0VMRmJOQVN4XSxzoH4TzfDWAqjXtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wA/dU8Aeq2IC01w
        V0M4T0GRLDw2yyo1NucqMzj0KzI5+CsyOfkqMjj2KTQ26iw6Nc41TD6YTm9XS4CzjxAAAAAA4P/sAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACOv50AufDKBE90
        WkRDWUqzSVRO8jM3P/81N0j/NzdJ/zw9UP4+QFX+QEJX/j9BVv49QFT/OTxO/zE0Qf8qNDf1MUc7v091
        WlKg07AGgrKRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AYJFuAHer
        hRFDYUuDXWpi7bi7uv/q6+z/xcXI/oqLk/5SUlv+OjpB/lVWYf5ERVT+PT5Q/j0/VP5BQ1f+QUNY/j9A
        VP4zNkX/KTU28z1ZR5JzpYEYT39dAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AFuI
        ZwBrnnobQVxJp32FgPzn6Oj//////v////7////+/f79/uvs7P7Nzs7+4uLi/tPT1P6trbH+YGFr/j9A
        Uf4+QFP+P0JW/kBDV/48PlH/KzI5/jZOP7hpl3YmQ2xNAOf88wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABvnXsAfbCKEEFbSKWKkIz/9vb2/v////7////+/////v////7////+/////v////7////+/////v//
        //7q6ur+uLi8/n+Aiv5HSVn+Oz5Q/j9CVv5AQlf+LTM8/zRMPbhxoX0ZXotqAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAj7+dAP///wNDXUmBcXh3/PT09f7////+/////v////7////+/////v////7////+/////vn6
        +f77+/v+/////v////7////++fn5/svLzf59fYT+RUZS/jc5Sf46PFD+KzE4/ztUQZar57kHgq+NAAAA
        AAAAAAAAAAAAANL76QA6VUEAVXhfRTJGQ+zIys3//////v////7////+/////v////7////+/////v//
        //7f3+L+iZCk/pGWpP7s7O3+/////v////7////+/////vv7+/7Z2dn+nJye/mVla/40OUX/Ijk99E1s
        VlcUJBgAteDGAAAAAAAAAAAAe6eIAJnHmAoyUEmxKHab/77R3P7////+/////v////7////+/////v//
        //7////+6Ojn/l1ga/5LW4T+Qk9y/nh5f/74+Pj+/////v////7////+/////v////7////+9PLx/mKF
        mP4hg7H/LU5KwniddxJul3oAAAAAAAAAAABHZE8AVG1SRCNYafIkl8//pLzI/v////7////+/////v//
        //7////+9PX1/urq6v6AgID+BAQF/gYHC/4DBAj+ExMT/qysrP7o6Oj++/v7/v////7////+/////v//
        //7p6er+SZzA/iC2+f4jYXb4R19IVytBMgCcwqcAirKXAAAAAAA6UkSQIH2n/ySi3f6etMD+/////v//
        //7////+/////vv7+/7BwsL+yMnJ/pKSkv5TVFP+GhoZ/i4uLv5+f37+vLy8/srLy/7q6ur+/////v//
        //7////+/////uDi5P5Flrv+JLv8/iSMuP8zTUSl8v/kBIKpjQB0mX0Ae5dtDypLS8chn9f/ILn9/nO0
        0f77+vr+/////v////7////++vr6/ubm5v7+/v7+/////vb29v7Z2dn+5ebm/v7+/v7////++fn5/vHx
        8f7////+/////v////7////+4uTm/k2Xtv4nvPn+KK7m/ylPVNlhd1cbZoduAFt7YwBVaUomJVRh5SWz
        8f8kvf/+TaHF/unp6f7////+/////v////7b29v+d3d3/vLy8v7////+/////v////7////+/////v//
        //7Gxsb+gICA/vv7+/7////+/////v////6xtbn+MY60/izE//4svvj/J11t8UdXQDlIYU4AR2FOAEla
        Qz0mYXX0Kbz7/yjC//4zmsT+u7/C/v////7////+/////vf39/7e3t7+/Pz8/v////7////+/////v//
        //7////+/////u/v7/7e3t7+/v7+/v////7////+//7+/ouOn/4zXoH+Mrzx/jHG//4obYX7PE05UjBD
        NQA4Sj0AP0o5RSVqgvcswv7+LcT//jCNuf56fof+/f39/v////7////+/////v////7////+/////v//
        //7////+/////v////7////+/////v////7////+/////v////7w8fD+bXqV/kFVfv46q9r+Nsv//ix4
        k/0xQDFaHy8kADdIOwA9SDdFJ2uB9zDE/v4zw/r+P3qm/lNdef7a2tv+/////v////7////+/////v//
        //7////+/////v////7////+/////v////7////+/////v////7////+/////tPZ2v5mmLH+S2GM/j2d
        x/47z//+LnqS/TE+L1keLSMARFtJAEVSPTwqZHXzNsX8/zi/8f4+aI/+XY+x/peorf79/f3+/////v//
        //7////+/////v////7////+/////v////7////+/////v////7////+/////v////7+/f3+maWo/mGn
        vP5QdZr+OpK0/kDS//4vcob7Okg4Ui4/MwBXcl0AT19FKCtWX+c6wfP/O7/u/j5niP5lrMb+cJCY/urp
        6f7////+/////v////7////+/////v////7////+/////v////7////+/////v////7////+/////uPj
        4/5wiZD+ZbPI/kl2j/47mLj+RtH9/y5ibfJBUTo7Q1tHAG6LcgBvg2AQLEpIyTuy2v8/xPD+QnaT/mzB
        2v5dmKj+iZaa/vDw8P7////+/////v////7////+/////v////7////+/////v////7////+/////v39
        /f7Mz8/+c6Ov/kmNnv5bn7L+Uoyi/kWy0/5Jxer/LlFS2lZoSxxee2MAfp+IAP///wA1SDyTNo2n/0bQ
        +v5Cgpv+X6K2/kaGmP5Mo7v+faey/tDU1f76+fn+/////v////7////+/////v////7////+/////v//
        //7u7ez+jJGT/lOTof5U0fD+VdPy/kmKnP5Hfo/+T87w/kKhuv8zRz6qxei1BXqYgAC82OEAPVI/AEhZ
        QkcvX2b0S871/0mbtf5Dc4P+T8Lg/lXe//5U0e/+XK/C/oartP69ysz+6evr/vv6+v78+/v++/v6/unr
        6v7Z29v+vsjJ/oulq/5Ojpv+WNHr/lrh//5Z4P/+VcXe/kukuv5X2fr+Nm12+0BQPF0iMSMAkLOaAAAA
        AABri20Ae5hyDjFHPrhCoLn/T73a/kmgt/5X3f/+V93+/lnf/v5b4f/+W9jz/l3H3f51w9H+jKmu/oyt
        s/6VqKz+a42T/mO1w/5ewtX+X9bt/mLk/f5f5P/+XuL+/l3h/v5b4P3+W+L//k6yyf8xSkTKZX1fF2J+
        ZQAAAAAAAAAAAJ2/pgAqOisAR1lESjFZW/BTyeb/WN38/lnf/v5b4P7+XeH+/l/i/v5i5P/+Y+b//mPm
        /v5gzuL+Ydbq/mPQ5P5iyNn+aOn+/mfo//5m5//+Zeb+/mPl/v5j5f7+YeT+/l/k//5d2PH/NmVo+EBS
        P2IAAAAAjrGWAAAAAAAAAAAAAAAAAHeXewC24bMEOko7izp1ff5c2/f+XeL//mDi/v5i5P7+ZOX+/mbm
        /v5o5/7+aej+/mnp/v5q6f7+a+r//mvr/v5r6f7+a+n+/mro/f5p6P7+aOj+/mjn/v5m5//+ZuT7/kOF
        jv82RzmggqGACmyKcAAAAAAAAAAAAAAAAAAAAAAAAAAAAF10XABpgWUUM0U5rEKEjf9j4Pf+ZOb//mbm
        /v5n5/7+auj+/mrp/v5r6v7+bOr+/m3r/v5t6/7+bev+/m7r//5t6/7+bev+/m3q/v5s6v7+a+r+/mvn
        +/5LlJ7/MkU8wF5yWB9TZlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5fbnAEVWQQBbbVQcM0Q5r0B5
        f/5k1ur/a+v//mvq/v5t6v7+bev+/m7s/v5v7f7+cO3+/nHu/v5w7v/+cO7+/nDu/v5w7f7+b+3//nDv
        //5r4fD+SIeN/zJEO75TZE4oMj8vAMThxgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/f79AEla
        RABhdVsWOEc5jjddXPJZsLz/bub3/nHw//5y7//+cu7//nLv/v5z7/7+dPD+/nPw/v5z8P/+dPH//nXz
        //507fn+Yb3H/zxmZfc2RTedW2tSHjhELwDR5dEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGyAZgCKn4EGQ089UTNFPMI9aWn4V6au/2vV4f906vf/d/L+/nn0//559P/+d/L//nfs
        +f9v2uT/XK+1/0FwcPozRz7KP0o6XXGHagpbb1YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANDizAAAAAAAZXVcEj5IN1MyPzafNE1J1DxkY+5FeXv5S4iK/EuJ
        i/xGfH36PWdm8TVQS9kyQTepO0U0Wl9tUhYAAAAAv9O5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgYxuAJ2piwNYYEkXP0UzNDQ6
        K0wtNCdXLDMnWDM5LE89QjE4UltFG5KdggVHVDQA///+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////gB///gAH//gAAf/wAAD/4AAAf8AAAD+AAAAfgAAAHwAAAA8AA
        AAPAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHAAAABwAAAA8AAAAPgAAAH4AAAB/AA
        AA/4AAAf/AAAP/4AAH//gAH//+AH//////8=
</value>
  </data>
</root>