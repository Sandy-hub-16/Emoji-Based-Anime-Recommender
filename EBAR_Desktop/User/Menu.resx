<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AABFMiz/Pykk/2lLPf9pSjz/aks9/19CM/9jQjT/dU09/3pRQP98UkH/eFA//3hQP/96Tzv/e1A+/35R
        QP9/U0H/f1RC/4FWRP9ySTn/cks8/4BXR/94UEH/bkc3/3lRQf91Tj//ckw+/29NP/9xUkP/dldI/21O
        P/9pSz7/QSwn/0EsKf9UOzX/Z0k+/2BCN/9kRzv/ZEc5/2JCNP9sSDr/cE0+/3NQP/9wSjv/b0c5/3RK
        O/91Szv/dk0+/3hPP/95UED/eE9A/1s4Kv9fPS//fVNE/3RNQP9kQTX/b0s9/25KPP9rSTv/aUo7/25P
        QP9yU0f/aEo+/2hJQP9LMy7/Uzo0/19GPv9gRDv/YEM6/2JGO/9kRTn/Y0Q4/2VFN/9qSj3/b09A/2lI
        Ov9pRjn/a0c5/2tHOf9sSDr/b0o8/29KPP9iQTL/YUAx/1Y4K/9vSz3/cEw+/14/M/9lRjf/aEg6/2ZG
        Of9mRjn/a0w//2tNQv9iRD3/ZEZA/0gyK/9aPzj/W0E4/1tAN/9eQzf/VTwx/1tANf9hRDf/X0E0/2RG
        Ov9rTD7/ZkY4/2ZHOP9mRTf/Z0U3/2dGOP9pSDn/YkI1/15AMv9rSjv/Vjwu/2FENv9qSzz/Wj0z/11A
        NP9kRjn/Y0M6/2NDO/9nSD//aEtC/2FEPv9ZPjr/QS0m/1o/O/9cQT3/Vjw0/1k+N/9ONS//WUA2/15D
        N/9aPjL/XkI4/2RGO/9gQjX/X0I2/10/M/9iQzX/Y0Q2/2JEN/9eQDX/ZUY5/2dIOv9gQTT/Wz0x/2dH
        Ov9TODD/VDgx/2FCOf9fPzn/Xz87/2JEPf9nSkL/X0M9/1M7Nf87KCL/tpyS/5l+dP9VPDT/VDo2/1E3
        NP9XPzn/XkU6/1c8Mf9ZPjP/Wz80/1o/M/9aPzT/Wz4z/11ANP9eQTb/Wz80/15CNv9hRDn/ZEU+/1pA
        T/9GMTb/YUM8/1A3Mf9MMi3/XT84/1s9N/9cPjn/X0M9/2VHQv9bQDv/SDUt/zgmIf/p2M/05c/G/7KY
        jP94XlT/dlpS/2JIQv9WPjX/UTYw/1Q6M/9VPDL/Vj0z/1M7Mv9WPDL/Vz0z/1Y8M/9aQDX/XEI2/1tB
        OP9eSl//XVSN/0U3T/9bQDf/VTw0/0o0Lf9aPTf/WTw2/1o8OP9eQTz/YEQ+/1M9N/9FMiv/Oigi/7Wt
        qFHVx8C+5s/F+97EuP/bwbb/o4h+/1dCOf9HMiv/Tjoy/087NP9ROzX/Uj02/1I6NP9PODL/VDs0/1c+
        N/9YPzj/XE1h/2ZinP9pZqf/UEVq/1I8Nv9TPjf/TTgx/1c7Nf9WOzT/Vzs1/1k9OP9YPjn/SjYw/0o3
        L/9BLyf/yL24AIR8eRO5qqRw28e+2+zVy//r0cb/q5GG/1dBOv9KNzD/TDky/006M/9QPTX/Sjcv/0w5
        Mf9RPTX/Uj44/1lLXP9pZp7/a2qp/2tqq/9cV4b/Tjw4/1A9Nf9POzP/UDky/0szLv9ROTP/VD83/046
        Mv9MODH/UTw1/0o3L/8AAAAAOTUzAAAAAACViIQmw7KqkuDKwOzt1cr/vKKY/1xHP/9INS7/TDgx/0g1
        Lv9GMyv/TTky/1E+Of9hVW7/bWyk/21sqv9paKb/bmyu/2VimP9NPT7/Tzs0/1RBOv9HNCz/RjMs/006
        M/9TPzf/VkI7/3phWv+Qdm3/XUdA/wAAAAAAAAAAAAAAAGdcWgA/ODgEnZCJP8m4sLDizcP3v6ic/3Fa
        Uf9rVEz/Tjky/0k2L/9KODP/X1Vx/29tp/9VU4T/Uk6B/2Rjmv9vb6v/aGae/0w7Qf9LNjL/V0I//0k0
        Lv9SPDb/aFBK/52BeP+ymI7/zrWq/+3Sxv+hhXv/AAAAAAAAAAAAAAAAAAAAAAAAAACNg38AYlpXC6ug
        nFrVxr7K1cG2/aWMgf9MNzD/STUv/1BFWf9jY5j/MTFN/wkJD/8TECD/QT1n/2xrp/9saqX/UD9J/0Yz
        Lv9UPzz/b1RP/62Riv/RtKz/48e8/+TKwP/t08j/8NfM/9K3rvIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAOEREA////AIWBfxjJwbyCtKWf61xHQP9IOD3/XVqK/ykpP/8kIzb/TEx2/ywtQ/8fHTH/Zmag/2lo
        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
        BUYGBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCgoACwkJHgoH
        CHwMBgSzDgYD/w8GA/8PBgP/DwYE/xAGBP8QBgT/EAYE/w8GBP8PBgT/DwYE/w8GBP8OBgP/DQUD/wwF
        Av8KBQPtEhITNwsHBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAP
        DwAODg4LDQcGrRIIB9MSBwP+EwgE/xMIBP8TCAT/EwgE/xMIBP8TCAT/EwgE/xMIBP8TBwT/EwcE/xIH
        A/8QBgP/DwYC/w0HBdEhJCckCwcHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAFhgZABIFAQARCAZZFQgF9hcIBf8YCQb/GAoG/xkKBv8ZCgf/GQsG/xkLBv8ZCwb/GQoG/xgJ
        Bf8XCQb/FQkF/xQIBP8TCAT/EgkImi88QA4nLjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAGhAPAB4YGBcbDAqjHQsG/h4MBv8fDQf/IA4G/yAOB/8gDgb/IA4H/yAO
        Bv8fDQf/HQ0H/x0MB/8bCgf/GwoH/xcJBu8aExJMYoGIAzxFSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfExEAIBUVFyAQDXMhDgfiIQ8H/yMPB/8lEQb/JREG/yUR
        Bv8kEQb/IxEG/yMQB/8jEAf/Ig8H/yEOBv8fDQb/HxAMmjc3Nw4AAAAAS1FVAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkZGAAaAAAAIhENKyYSDKUmEQr6KBAG/ykR
        B/8qEgf/KhIH/ykSBv8oEQb/KBEG/ycSCP8oEwv/JA8G/yMQCbYnGRYcGQkEAKW4qwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA4AAAAPAA
        AAD8AAAA/wAAAP+AAAD/wAAP/+AA///gA///4AP//8AB//+AAP//AAB//wAA//4AAH/+AAB//AAAf/wA
        AH/8AAB//AAAf/4AAH/+AAB//gAA//8AAf8=
</value>
  </data>
</root>